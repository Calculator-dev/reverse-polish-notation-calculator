{"version":3,"sources":["components/InputField.js","components/Buttons.js","components/Calculator.js","components/AppHeader.js","components/AppFooter.js","App.js","index.js"],"names":["InputField","input","InputHandler","className","placeholder","value","onChange","Buttons","Clear","locked","Counting","disabled","onClick","Calculator","useState","msg","setMsg","setInput","setLocked","console","log","empty","operators","operands","validInput","e","target","match","newExpr","expr","split","stack","numberCounter","operatorCounter","i","length","isNaN","isFinite","push","a","pop","b","parseFloat","AppHeader","AppFooter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAUeA,EARI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACzB,OACI,8BACI,uBAAOC,UAAU,QAAQC,YAAY,kDAAkDC,MAAOJ,EAAOK,SAAUJ,OCM5GK,MATf,YAAsD,IAAnCC,EAAkC,EAAlCA,MAAOP,EAA2B,EAA3BA,MAAOQ,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACrC,OACI,sBAAKP,UAAU,UAAf,UACI,wBAAQA,UAAU,UAAUQ,SAAUF,EAAQG,QAAS,kBAAMF,EAAST,IAAtE,qBACA,wBAAQE,UAAU,QAAQS,QAASJ,EAAnC,uBC+EGK,EAjFI,WAEf,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,IAAnC,mBAAOb,EAAP,KAAcgB,EAAd,KACA,EAA4BH,mBAAS,GAArC,mBAAOL,EAAP,KAAeS,EAAf,KACAC,QAAQC,IAAInB,GAEZ,IAAMoB,EAAQ,mBAAGlB,UAAU,WAAb,yCACRmB,EAAY,mBAAGnB,UAAU,WAAb,mEACZoB,EAAW,mBAAGpB,UAAU,WAAb,kEACXqB,EAAa,mBAAGrB,UAAU,WAAb,gEA8DnB,OACI,sBAAKA,UAAU,YAAf,UACI,cAAC,EAAD,CAAYF,MAAOA,EAAOC,aA9Db,SAACuB,GACdA,EAAEC,OAAOrB,MAAMsB,MAAM,kBACrBX,EAAOQ,IAGPP,EAASQ,EAAEC,OAAOrB,OAClBW,EAAO,QAyDP,cAAC,EAAD,CAASP,OAAQA,EAAQR,MAAOA,EAAOO,MArD/C,WACIS,EAAS,IACTD,EAAO,IACPE,EAAU,IAkD+CR,SA/C7D,SAAkBkB,GAMd,IALA,IAAIC,EAAOD,EAAQE,MAAM,KACrBC,EAAQ,GACRC,EAAgB,EAChBC,EAAkB,EAEbC,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,IAC7B,IAAKE,MAAMP,EAAKK,KAAOG,SAASR,EAAKK,IACjCH,EAAMO,KAAKT,EAAKK,IAChBF,QACG,CACHC,IACA,IAAIM,EAAIR,EAAMS,MACVC,EAAIV,EAAMS,MACE,MAAZX,EAAKK,GACLH,EAAMO,KAAKI,WAAWH,GAAKG,WAAWD,IACnB,MAAZZ,EAAKK,GACZH,EAAMO,KAAKI,WAAWH,GAAKG,WAAWD,IACnB,MAAZZ,EAAKK,GACZH,EAAMO,KAAKI,WAAWH,GAAKG,WAAWD,IACnB,MAAZZ,EAAKK,IACZH,EAAMO,KAAKI,WAAWH,GAAKG,WAAWD,IAKlD,GAAc,KAAVxC,EACA,OAAOe,EAAOK,GAGdW,IAAkBC,EAAkB,GACpChB,EAAShB,EAAQ,MAAQ8B,EAAM,IAC/Bb,EAAU,IAELc,GAAiBC,GACtBjB,EAAOO,GACPL,EAAU,KAGVF,EAAOM,GACPJ,EAAU,OAQTH,MCtEE4B,EAVG,WACd,OACI,iCACI,qBAAKxC,UAAU,SAAf,SACI,oBAAIA,UAAU,YAAd,qDCADyC,EAJG,WACd,OAAO,sHCcIC,MAVf,WACE,OACE,sBAAK1C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCLN2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8536ab6f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputField = ({ input, InputHandler }) => {\r\n    return (\r\n        <div>\r\n            <input className=\"input\" placeholder=\"Enter the operand and operator: 2,6,5.5,4,*,-,+\" value={input} onChange={InputHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputField;","import React from \"react\";\r\n\r\nfunction Buttons({ Clear, input, locked, Counting }) {\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button className=\"compute\" disabled={locked} onClick={() => Counting(input)}>Compute</button>\r\n            <button className=\"clear\" onClick={Clear}>Clear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React, { useState } from \"react\";\r\nimport InputField from \"./InputField\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Calculator = () => {\r\n\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [input, setInput] = useState(\"\");\r\n    const [locked, setLocked] = useState(0);\r\n    console.log(input)\r\n\r\n    const empty = <p className=\"messages\">You did not enter anything!</p>\r\n    const operators = <p className=\"messages\">\"Something went wrong! Check the number of OPERATORS\"</p>\r\n    const operands = <p className=\"messages\">\"Something went wrong! Check the number of OPERANDS\"</p>\r\n    const validInput = <p className=\"messages\">\"Only numbers and arithemtic operators are valid!\"</p>\r\n\r\n    const InputHandler = (e) => {\r\n        if (e.target.value.match(/[^0-9-+/*,.]+$/)) {\r\n            setMsg(validInput)\r\n        }\r\n        else {\r\n            setInput(e.target.value);\r\n            setMsg(\"\");\r\n        }\r\n    }\r\n\r\n    function Clear() {\r\n        setInput(\"\");\r\n        setMsg(\"\");\r\n        setLocked(0);\r\n    }\r\n\r\n    function Counting(newExpr) {\r\n        let expr = newExpr.split(\",\");\r\n        let stack = [];\r\n        let numberCounter = 0;\r\n        let operatorCounter = 0;\r\n\r\n        for (let i = 0; i < expr.length; i++) {\r\n            if (!isNaN(expr[i]) && isFinite(expr[i])) {\r\n                stack.push(expr[i]);\r\n                numberCounter++;\r\n            } else {\r\n                operatorCounter++;\r\n                let a = stack.pop();\r\n                let b = stack.pop();\r\n                if (expr[i] === \"+\") {\r\n                    stack.push(parseFloat(a) + parseFloat(b));\r\n                } else if (expr[i] === \"-\") {\r\n                    stack.push(parseFloat(a) - parseFloat(b));\r\n                } else if (expr[i] === \"*\") {\r\n                    stack.push(parseFloat(a) * parseFloat(b));\r\n                } else if (expr[i] === \"/\") {\r\n                    stack.push(parseFloat(a) / parseFloat(b));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (input === \"\") {\r\n            return setMsg(empty);\r\n        }\r\n\r\n        if (numberCounter === operatorCounter + 1) {\r\n            setInput(input + \" = \" + stack[0]);\r\n            setLocked(1);\r\n        }\r\n        else if (numberCounter <= operatorCounter) {\r\n            setMsg(operands);\r\n            setLocked(0);\r\n        }\r\n        else {\r\n            setMsg(operators);\r\n            setLocked(0);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <InputField input={input} InputHandler={InputHandler} />\r\n            <Buttons locked={locked} input={input} Clear={Clear} Counting={Counting} />\r\n            {msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;","const AppHeader = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"header\">\r\n                <h1 className=\"app-title\">Reverse Polish Notation Calculator</h1>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;","const AppFooter = () => {\r\n    return <footer>Paragon Reverse-Polish-Notatio-Calculator 2021 @ Copyright, All rights reserved</footer>;\r\n};\r\n\r\nexport default AppFooter;","import './index.css';\r\nimport Calculator from \"./components/Calculator\";\r\nimport AppHeader from './components/AppHeader';\r\nimport AppFooter from './components/AppFooter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppHeader />\r\n      <Calculator />\r\n      <AppFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}